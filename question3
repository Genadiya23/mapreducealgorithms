>>> from pyspark.sql import SparkSession
... from pyspark.sql.functions import col, countDistinct, desc
... 
... # Initialize a SparkSession
... spark = SparkSession.builder.appName("HetIONetAnalysis").getOrCreate()
... 
... # Correct file paths
... nodes_path = "/Users/yanasivakova/Downloads/hetionet/nodes.tsv"
... edges_path = "/Users/yanasivakova/Downloads/hetionet/edges.tsv"
... 
... # Load nodes and edges data
... nodes_df = spark.read.option("delimiter", "\t").option("header", True).csv(nodes_path)
... edges_df = spark.read.option("delimiter", "\t").option("header", True).csv(edges_path)
... 
... # Filter edges for drug-gene associations
... drug_gene_df = edges_df.filter(col("metaedge").isin("CuG", "CdG", "CbG"))
... 
... # Count distinct genes associated with each drug
... # "source" represents the drug (compound), and "target" represents the gene
... drug_gene_count = drug_gene_df.groupBy("source").agg(countDistinct("target").alias("gene_count"))
... 
... # Ensure the "gene_count" is treated as a numeric column for correct sorting
... drug_gene_count = drug_gene_count.withColumn("gene_count", col("gene_count").cast("int"))
... 
... # Join with nodes to get the drug names (assuming the "source" in edges matches "id" in nodes)
... drug_gene_names = drug_gene_count.join(nodes_df, drug_gene_count.source == nodes_df.id, "inner") \
...     .select(nodes_df.name, "gene_count")  # Select drug names and gene count
... 
... # Sort by gene count in descending order and show the top 5 drugs
... drug_gene_names.orderBy(desc("gene_count")).show(5)
...
